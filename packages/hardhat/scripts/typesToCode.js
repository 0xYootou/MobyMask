const types = require('./types');
const fs = require('fs');
const path = require('path');
const {
  signTypedData,
  TypedDataUtils,
  typedSignatureHash,
  SignTypedDataVersion,
  encodeData,
  encodeType,
} = require('signtypeddata-v5').TypedDataUtils;

function generateTypeStringFrom (types) {
  return Object.keys(types.types).map((typeName) => {
    const type = types[typeName];
    return `bytes32 constant ${typeName.toUpperCase()}_TYPEHASH = keccack256("${encodeType(typeName, types.types)}");`;
  })
  .join('\n');
}

function updateSolidity () {
  const typeHashes = generateTypeStringFrom(types);
  const filePath = path.join(__dirname, '../../packages/hardhat/contracts/Delegatable.sol');
  const file = fs.readFileSync(filePath, 'utf8').toString();
  const oldFile = file.split('\n');
  const newFile = [];

  let autoGenRange = false;
  oldFile.forEach((line) => {
    if (line.includes('// BEGIN EIP712 AUTOGENERATED CODE')) {
      autoGenRange = true;
      newFile.push(...typeHashes)
      return true;
    }

    if (line.includes('// END EIP712 AUTOGENERATED CODE')) {
      autoGenRange = false;
      return true;
    }

    // Return any line not in the autoGenRange
    return !autoGenRange;
  })

}

module.exports = {
  generateTypeStringFrom,
}